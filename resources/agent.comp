#version 430

#define texture_width 0
#define texture_height 0
#define l_size_x 1

#define PI 3.1415926535897932384626

layout(rgba32f, location=0) restrict uniform image2D texture;

layout(local_size_x=l_size_x, local_size_y=1, local_size_z=1) in;

struct Agent {
	vec2 pos;
	vec2 dir;
};

layout(std430, binding=0) buffer buf_ants {
	Agent agents[];
} Buf_agents;

uniform int nb_agent;

uniform float speed;
// uniform float steerStrength;
// uniform float wanderStrength;

uniform int timer;

float map(float value, float min1, float max1, float min2, float max2) {
	return min2 + (value - min1) * (max2 - min2) / (max1 - min1);
}

uint hash(uint x) {
	x ^= 2747636419u;
	x *= 2654435769u;
	x ^= x >> 16;
	x *= 2654435769u;
	x ^= x >> 16;
	x *= 2654435769u;
	return x;
}

// uint hash(uint x) {
// 	x += ( x << 10u );
// 	x ^= ( x >>  6u );
// 	x += ( x <<  3u );
// 	x ^= ( x >> 11u );
// 	x += ( x << 15u );
// 	return x;
// }

float random_uniform(uint seed) {
	return float(hash(seed)) / 4294967295u;
}

vec2 random_uniform_vec2(uint seed) {
	const float angle = (random_uniform(seed) * 2*PI) - PI;
	return vec2(cos(angle), sin(angle));
}

void main()
{
	const uint id = gl_GlobalInvocationID.z * gl_NumWorkGroups.y * gl_NumWorkGroups.x +
					gl_GlobalInvocationID.y * gl_NumWorkGroups.x +
					gl_GlobalInvocationID.x;

	if (id >= nb_agent) return;

	Agent agent = Buf_agents.agents[id];

	// maximum randomness using multiple values
	const uint seed = hash(timer + id);

	vec2 newPos = agent.pos + agent.dir * speed;

	// if agent get outside of map
	if (newPos.x < 0 || newPos.x > texture_width || newPos.y < 0 || newPos.y > texture_height) {
		newPos = clamp(newPos, vec2(0.01, 0.01), vec2(texture_width - 0.01, texture_height - 0.01));
		Buf_agents.agents[id].dir = random_uniform_vec2(seed);
	}

	Buf_agents.agents[id].pos = newPos;
	// ----

	// texture trail
	int x = int(agent.pos.x);
	int y = int(agent.pos.y);

	ivec2 texelPos = ivec2(x, y);
	vec4 texel = vec4(imageLoad(texture, texelPos).rgba);
	vec4 newTexel = vec4(1, 0, 0, 1);
	imageStore(texture, texelPos, newTexel);
}
